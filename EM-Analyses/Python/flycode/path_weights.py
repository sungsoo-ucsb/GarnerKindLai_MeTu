#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 10 11:05:50 2024

@author: Dustin Garner
"""


import os
import collections
import numpy as np
import pandas as pd
import flycode.mapping as mapping
import flycode.reduction as reduction
import flycode.readfiles as readfiles
import flycode.figures as figures


all_tb_types = [f"0{x!s}" if x<10 else str(x) for x in range(1,11)]
tb_l = [f"TuBu{x}_L" for x in all_tb_types]
tb_r = [f"TuBu{x}_R" for x in all_tb_types]


def get_full_df():
    """Imports the spreadsheet with all neurons.

    Returns
    -------
    full_df : TYPE
        DESCRIPTION.
    """
    full_df = readfiles.import_file("Full783", file_type="feather")
    full_df.rename(columns={"pre_pt_root_id": "pre", "post_pt_root_id": "post"},
                   inplace=True)
    return full_df


def get_cx_df(full_df):
    """Gets a dataframe with all synapses in which CX non-interneurons are
    postsynaptic and the synapses are not within the CX itself (exempting TuBu
    presynapses, which are sometimes labeled as located within the CX while 
    they are really in the bulb).

    Parameters
    ----------
    full_df : pd.DataFrame
        The dataframe retrieved from get_full_df().

    Returns
    -------
    cx_df : pd.DataFrame
        A dataframe with CX neuron postsynapses.

    """
    info_df = readfiles.import_file("CX_Neurons", sheet_name="CX non-Interneurons")
    cx_neurs = np.asarray(info_df.root_id)
    cx_df = full_df[full_df.post.isin(cx_neurs)]
    cx_df = cx_df[(~(cx_df.neuropil.isin(["PB", "FB", "EB", "NO"])))| \
                  (cx_df.pre.isin(mapping.ids_from_types(tb_l+tb_r)))]
    cx_df = reduction.remove_min_synapses(cx_df, min_syns=5, pre_or_post="post")
    cx_df = reduction.remove_min_synapses(cx_df, min_syns=5, pre_or_post="pre")
    return cx_df


def get_layer2_df(full_df):
    """Gets a dataframe with all synapses in which Layer2 neurons are 
    postsynaptic.

    Parameters
    ----------
    full_df : pd.DataFrame
        The dataframe retrieved from get_full_df().

    Returns
    -------
    layer2_df : pd.DataFrame
        A dataframe with Layer2 postsynapses.
    """
    layer2 = layer2 = np.asarray(readfiles.import_file("CX_Neurons", 
                                                       sheet_name="Layer2").root_id)
    layer2_df = full_df[full_df.post.isin(layer2)]
    return layer2_df


def get_layer2(neur, cx_df, min_weight=0.01):
    """Gets all of the relevant presynaptic neurons from a CX neuron.

    Parameters
    ----------
    neur : int
        A neuron ID found within the CX non-interneurons.
    cx_df : pd.DataFrame
        Generated by get_cx_df().
    min_weight : float, optional
        The minimum weight to include when querying. The default is 0.01.

    Returns
    -------
    weight_dict : dict
        A dictionary with the resulting weights.
    """
    layer2_df = readfiles.import_file("CX_Neurons", sheet_name="Layer2")
    layer2_weights = layer2_df.set_index("root_id")["total_weight"].to_dict()
    layer2_neurs = np.asarray(layer2_df.root_id)
    neur_df = cx_df[cx_df.post==neur]
    neur_df = neur_df[neur_df.pre.isin(layer2_neurs)]
    weight_dict = {}
    for i in np.unique(neur_df.pre):
        temp_df = neur_df[neur_df.pre==i]
        temp_weight = len(temp_df) / len(neur_df)
        temp_weight *= layer2_weights[i]
        if temp_weight<min_weight:
            continue
        weight_dict[i] = temp_weight
    weight_dict = dict(sorted(weight_dict.items(), key=lambda x: x[1], reverse=True))
    return weight_dict


def get_layer3(neur, layer2_df, min_weight=0.01):
    """Gets all of the relevant presynaptic optic neurons from a neuron that is
    presynaptic to a CX neurons (a layer 2 neuron).

    Parameters
    ----------
    neur : int
        A neuron ID of a Layer 2 neuron.
    layer2_df : pd.DataFrame
        Generated by get_layer2_df().
    min_weight : float, optional
        The minimum weight to include when querying. The default is 0.01.

    Returns
    -------
    weight_dict : dict
        A dictionary with the resulting weights.
    """
    layer2_weight_df = readfiles.import_file("CX_Neurons", sheet_name="Layer2")
    layer2_weights = layer2_weight_df.set_index("root_id")["total_weight"].to_dict()
    if layer2_weights[neur] == 1.0:
        return {}
    layer3_neurs = np.asarray(readfiles.import_file("CX_Neurons", 
                                                     sheet_name="Layer3").root_id)
    neur_df = layer2_df[layer2_df.post==neur]
    neur_df = neur_df[neur_df.pre.isin(layer3_neurs)]
    weight_dict = {}
    for i in np.unique(neur_df.pre):
        temp_df = neur_df[neur_df.pre==i]
        temp_weight = len(temp_df) / len(neur_df)
        if temp_weight<min_weight:
            continue
        weight_dict[i] = temp_weight
    weight_dict = dict(sorted(weight_dict.items(), key=lambda x: x[1], reverse=True))
    return weight_dict


def get_renderable_neurs(neur_type, min_weight=0.01):
    """Gets the path of a specific neuron type, and tells which neurons
    should be rendered.

    Parameters
    ----------
    neur_type : str
        A neuron type (do not include hemispheric suffix).
    min_weight : float, optional
        The minimum weight to include when querying. The default is 0.01.

    Returns
    -------
    neur_dict : dict
        Contains the neurons, including what layer and hemisphere they are in.
    """
    cx_syn_df = readfiles.import_file("CX_Neurons", 
                                      sheet_name="CX Neuron Synapses Outside CX")
    cx_df = readfiles.import_file("CX_Neurons", sheet_name="CX non-Interneurons")
    cx_df = cx_df[cx_df.neur_type==neur_type]
    cx_df.set_index("root_id", inplace=True)
    full_df = get_full_df()
    layer2_df = get_layer2_df(full_df)
    neur_dict = {f"Layer {x} {y} Side": [] for x in "123" for y in ["Right", "Left"]}
    layer2_weights = {x: collections.defaultdict(float) for x in "LR"}
    layer2_neurs = []
    for i in np.asarray(cx_df.index):
        hemis = cx_df.loc[i, "hemisphere"]
        hemis_full = "Right" if hemis=="R" else "Left"
        neur_dict[f"Layer 1 {hemis_full} Side"].append(i)
        layer2 = get_layer2(i, cx_syn_df, min_weight=min_weight)
        for j in layer2:
            layer2_weights[hemis][j] += layer2[j]
            layer2_neurs.append(j)
    layer2_neurs = np.unique(layer2_neurs)
    for i in layer2_neurs:
        hemis = "Left" if layer2_weights["L"][i] > layer2_weights["R"][i] else "Right"
        neur_dict[f"Layer 2 {hemis} Side"].append(i)
    layer3_weights = {x: collections.defaultdict(float) for x in "LR"}
    layer3_neurs = []
    for i in ["Left", "Right"]:
        for j in neur_dict[f"Layer 2 {i} Side"]:
            layer3 = get_layer3(j, layer2_df, min_weight=min_weight)
            for k in layer3:
                layer3_weights[i[0]][k] += layer3[k]
                layer3_neurs.append(k)
    layer3_neurs = np.unique(layer3_neurs)
    for i in layer3_neurs:
        hemis = "Left" if layer3_weights["L"][i] > layer3_weights["R"][i] else "Right"
        neur_dict[f"Layer 3 {hemis} Side"].append(i)
    return neur_dict


def make_weight_strip_plot(plot_name="", plot_folder="", save_figure=True):
    """Makes a weight strip plot of CX neuron types.

    Parameters
    ----------
    plot_name : str, optional
        The name of the figure to be saved. The default is "".
    plot_folder : str, optional
        The folder in which to save the figure. The default is "".
    save_figure : bool, optional
        Whether to save the figure. The default is True.

    Returns
    -------
    weight_df : pd.DataFrame
        The resulting dataframe.
    """
    weight_df = readfiles.import_file("CX_Neurons", sheet_name = "CX non-Interneurons")
    weight_df.rename(columns={"total_weight": "Optic Lobe Weight",
                              "neur_type": "CX Neuron Type"},
                     inplace=True)
    neur_types = {}
    non_avp_rings = [f"ER{x}" for x in ["1","3a_bc","3_misc","6"]]
    for i in [f"ER{x}" for x in ["1","2_ad","2_b","2_c","3a_ad","3a_bc","3_misc",
                                 "3d_a","3d_b","3d_c","3d_d","3m","3p_ab","3w_ab",
                                 "4d","4m","5","6"]]:
        neur_types[i] = "#e6194B" if i in non_avp_rings else "#4400dd"
    for i in [f"ExR{x}" for x in range(1,9)]:
        neur_types[i] = "#4400dd" if i=="ExR1" else "#e6194B"
    for i in ["FB8B", "OA-AL2i1", "IbSpsP", "LNO2"]:
        neur_types[i] = "#3E7748"
    neur_types["Unidentified"] = "#EBC400"
    figures.strip_plot(data=weight_df,
                       x_label="CX Neuron Type",
                       y_label="Optic Lobe Weight",
                       order=neur_types.keys(),
                       hue=None,
                       palette=neur_types.values(),
                       plot_name=plot_name,
                       folder_path=[plot_folder],
                       dodge=False,
                       save_figure=save_figure,
                       fig_size=(8.0, 2),
                       show_means=True,
                       mean_type="_")
    return weight_df
    
    

